// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Each user has multiple Trips
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]

  // Customizable
  username String? @unique
  location String?
  bio      String?
  image    String?

  // Trips
  trips Trip[]
  likes Like[]

  // Social
  friends          User[]          @relation("Friendships")
  friendOf         User[]          @relation("Friendships")
  outgoingRequests FriendRequest[] @relation("FriendRequestSender")
  incomingRequests FriendRequest[] @relation("FriendRequestReceiver")
  notifications    Notification[]

  @@map("users")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// Every friend request sent from a sender User to a receiver User
model FriendRequest {
  id         Int                 @id @default(autoincrement())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())

  sender   User @relation("FriendRequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FriendRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  FRIEND_FINISHED_TRIP
}

// Every User has a list of notifications, including friend requests
model Notification {
  id     Int              @id @default(autoincrement())
  userId String
  type   NotificationType

  // The User the action is applied to: i.e. sender of the friend request, accepter of outgoing friend request, etc
  userIdInConcern String?

  requestId Int?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Each Trip has a one-to-many relationship with Visit and represents a trip the User takes
model Trip {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  visits Visit[]
  likes  Like[]

  @@index([userId])
}

model Like {
  userId    String
  tripId    Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@id([userId, tripId])
  @@index([userId])
  @@index([tripId])
}

// Each Visit has a many-to-one relationship with both Trip and Place and represents the instance of the User visiting a Place at a specific time
model Visit {
  id    Int      @id @default(autoincrement())
  date  DateTime @default(now())
  order Int      @default(autoincrement())

  trip   Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId Int

  place   Place  @relation(fields: [placeId], references: [place_id])
  placeId String

  placeFipsCode String?
}

// Each Place will have the info to be linked to the map and has a one-to-many relationship with Visit
model Place {
  id Int @id @default(autoincrement())

  place_id  String @unique
  map_type  String
  label     String
  fips_code String @unique

  visits Visit[]

  @@index([fips_code])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
