// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Each user has a list of their maps (exactly four maps for now)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  accounts      Account[]
  sessions      Session[]

  username String? @unique
  location String?
  bio      String?

  trips Trip[]

  @@map("users")
}

// Each Trip has a one-to-many relationship with Visit and represents a trip the User takes
model Trip {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  visits Visit[]
}

// Each Visit has a many-to-one relationship with both Trip and Place and represents the instance of the User visiting a Place at a specific time
model Visit {
  id    Int      @id @default(autoincrement())
  date  DateTime @default(now())
  order Int      @default(autoincrement())

  trip   Trip @relation(fields: [tripId], references: [id])
  tripId Int

  place   Place  @relation(fields: [placeId], references: [place_id])
  placeId String
}

// Each Place will have the info to be linked to the map and has a one-to-many relationship with Visit
model Place {
  id Int @id @default(autoincrement())

  place_id String @unique
  map_type String
  label    String

  visit Visit[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
